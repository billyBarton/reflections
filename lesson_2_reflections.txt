What happens when you initialize a repository? Why do you need to do it?
It creates a repository that tracks changes.
It is necessary as a first step in git version-control so that all changes made to the project can be tracked. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?
The staging area allows changes in multiple files to be compiled in one commit.  If a fix requires several files then it can consolidate the number of commits, ensuring that each commit is related to a logical change.

How can you use the staging area to make sure you have one commit per logical
change?
All files that have been changed that are related to the logical issue are added to the staging area.  From there, git commit will assign 1 id.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
Branches would be helpful when 
1) an experimental change is being introduced and we're not sure it will work. 
2) multiple developers are working on different features.  We may be able to introduce their feature without waiting for others to finish.
3) Developers are working on something and a hotfix is required.  A branch would allow others to continue working while the bug is fixed.
4) Can compartmentalize work.  Work on one thing, then switch to something else.

How do the diagrams help you visualize the branch structure?
Diagrams help me to see the various branches and to see which commits are on which branch, and if any commits are not reachable.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
Merging two branches together integrates the commits into one branch.  Ideally, the commits from both branches will now constitute the git history.  If changes have been made to the same code, then a conflict will occur and the merge will not occur.
The diagram helps to visually represent how the branches are structured.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
Pros: Git has a record of all commits and integrates them into one branch.  Developers don't have to cut and paste code from one file to the other.  This saves time and prevents transcription errors.  Also git tracks the commits automatically when merging.
Cons:  When the two branches have changed the same code, Git cannot resolve it and returns a conflict.  Developers have to resolve this manually.  However, Git marks the differences in the code with less than signs, making them easy to locate and resolve.
